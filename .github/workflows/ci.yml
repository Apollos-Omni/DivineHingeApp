name: DivineHinge CI

on:
  push:
    branches: [main]
  pull_request:
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  pull-requests: write

env:
  NODE_VERSION: "20.19.2"
  EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}

  # Public runtime env (used only by local steps in this workflow)
  EXPO_PUBLIC_SUPABASE_URL: ${{ secrets.EXPO_PUBLIC_SUPABASE_URL }}
  EXPO_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.EXPO_PUBLIC_SUPABASE_ANON_KEY }}
  EXPO_PUBLIC_SUPABASE_FUNCTIONS_URL: ${{ secrets.EXPO_PUBLIC_SUPABASE_FUNCTIONS_URL }}

jobs:
  checks-linux:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with: { lfs: true }

      - name: Use Node ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Generate .env for checks
        run: |
          cat <<EOF > .env
          EXPO_PUBLIC_SUPABASE_URL=${EXPO_PUBLIC_SUPABASE_URL}
          EXPO_PUBLIC_SUPABASE_ANON_KEY=${EXPO_PUBLIC_SUPABASE_ANON_KEY}
          EXPO_PUBLIC_SUPABASE_FUNCTIONS_URL=${EXPO_PUBLIC_SUPABASE_FUNCTIONS_URL}
          EOF

      - run: npm ci
      - run: npm run typecheck
      - run: npm run lint
      - run: npx expo-doctor --non-interactive || true

  # (Optional) keep Windows if you want, but it's slower and often flakier.
  # checks-windows:
  #   runs-on: windows-latest
  #   steps: ...

  build-android-preview:
    name: EAS Build (Android preview)
    needs: [checks-linux] # add checks-windows if you keep it
    runs-on: ubuntu-latest
    if: >
      (github.event_name == 'push') ||
      (github.event_name == 'workflow_dispatch') ||
      (github.event_name == 'pull_request' && github.event.pull_request.head.repo.fork == false)
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - run: npm ci

      - name: Setup Expo/EAS
        uses: expo/expo-github-action@v8
        with:
          expo-version: latest
          eas-version: latest
          token: ${{ env.EXPO_TOKEN }}

      # Trigger build and capture the ID + web URL.
      # NOTE: EAS Cloud env needs to be set on expo.dev (Environment: "preview").
      - name: Trigger EAS Android build (preview)
        id: trigger
        run: |
          set -e
          JSON=$(eas build --platform android --profile preview --non-interactive --json)
          echo "json=$JSON" >> $GITHUB_OUTPUT
          echo "$JSON" > eas-android.json
          ID=$(node -e "const a=JSON.parse(process.argv[1]); console.log(a[0].id)" "$JSON")
          URL=$(node -e "const a=JSON.parse(process.argv[1]); console.log(a[0].webUrl)" "$JSON")
          echo "id=$ID" >> $GITHUB_OUTPUT
          echo "url=$URL" >> $GITHUB_OUTPUT

      # Wait until the cloud build finishes
      - name: Wait for completion
        run: eas build:wait --build-id "${{ steps.trigger.outputs.id }}" --non-interactive

      # Down
